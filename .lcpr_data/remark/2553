{"data":[{"name":"2022-12-07 13:50:48","id":1670392248972,"body":"2462耗时0:15:18\n想到优先级队列,没想到这样处理就行了\nclass Solution\n{\npublic:\n    long long totalCost(vector<int> &costs, int k, int candidates)\n    {\n        priority_queue<int, vector<int>, greater<int>> pq1, pq2;\n        long long ans = 0;\n        int start = 0;\n        int end = costs.size() - 1;\n        int cnt = 0;\n        while (cnt < k)\n        {\n            while (pq1.size() < candidates && start <= end)\n            {\n                pq1.push(costs[start++]);\n            }\n            while (pq2.size() < candidates && end >= start)\n            {\n                pq2.push(costs[end--]);\n            }\n            int a = pq1.size() > 0 ? pq1.top() : INT_MAX;\n            int b = pq2.size() > 0 ? pq2.top() : INT_MAX;\n            if (a <= b)\n            {\n                ans += a;\n                // std::cout << \"(a:\" << a << \")\";\n                pq1.pop();\n            }\n            else\n            {\n                ans += b;\n                // std::cout << \"(b:\" << b << \")\";\n                pq2.pop();\n            }\n            cnt++;\n        }\n        return ans;\n    }\n};"},{"name":"2022-12-14 17:03:11","id":1671008591428,"body":"耗时 00:18:17\n一个优先级队列就可以\nclass Solution\n{\npublic:\n    long long totalCost(vector<int> &costs, int k, int candidates)\n    {\n        auto cmp = [](const pair<int, int> &left, const pair<int, int> &right)\n        {\n            // true使得left排后面\n            if (left.first > right.first)\n            {\n                return true;\n            }\n            else if (left.first == right.first)\n            {\n                return left.second > right.second;\n            }\n            return false;\n        };\n        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)>\n            qi(cmp);\n        long long result = 0;\n        int left_index = 0;\n        int left_in = 0;\n        int right_index = costs.size() - 1;\n        int right_in = 0;\n        for (int i = 0; i < k; i++)\n        {\n            while (left_in < candidates && left_index <= right_index)\n            {\n                qi.push({costs[left_index], left_index});\n                // std::cout << \"(jin\" << costs[left_index] << \",\" << left_index << \")\";\n                left_in++;\n                left_index++;\n            }\n            while (right_in < candidates && right_index >= left_index)\n            {\n                qi.push({costs[right_index], right_index});\n                // std::cout << \"(jin\" << costs[right_index] << \",\" << right_index << \")\";\n                right_in++;\n                right_index--;\n            }\n            pair<int, int> cur = qi.top();\n            qi.pop();\n            result += cur.first;\n            // std::cout << \"(\" << cur.first << \",\" << cur.second << \")\";\n            if (cur.second > right_index)\n            {\n                right_in--;\n            }\n            if (cur.second < left_index)\n            {\n                left_in--;\n            }\n        }\n        return result;\n    }\n};"}]}